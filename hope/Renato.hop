dec lista_a : list num;
dec lista_b : list num;
dec lista_char_1 : list char;
dec lista_char_2 : list char;
dec lista_char_3 : list (list char);
dec somatorio : num # num # (num -> num) -> num;
dec head : list num -> num;
dec HeadString : list char -> char;
dec TailString : list char -> list char;
dec rage : num # num # num -> list num;
dec rageInteface : num # num -> list num;
dec member : num # list num -> truval;
dec union : list num # list num -> list num;

--- lista_a <= [0, 1, 3, 5, 7, 11, 13, 19];

--- lista_b <= [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20];

--- lista_char_1 <= "Hello";

--- lista_char_2 <= "WORD!";

--- lista_char_3 <= ["Renato", "Araujo", "da", "Silva"];

--- somatorio (i, f, func) <= if i > f then 0 else func i + somatorio (1 + i, f, func);

--- head (x :: xs) <= x;

--- HeadString (x :: xs) <= x;

--- TailString (x :: xs) <= xs;

--- rage (c, f, i) <= if c > f then [] else c :: rage (c + i, f, i);

--- rageInteface (0, 0) <= [];
--- rageInteface (f, c) <= rage (0, f, c);

--- member (_, nil) <= false;
--- member (a, x :: xs) <= if a = x then true else member (a, xs);

--- union (a, []) <= a;
--- union ([], b) <= b;
--- union (a, nil) <= a;
--- union (nill, b) <= b;
--- union (a, b) <= a <> b;
